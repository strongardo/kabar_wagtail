from wagtail.models import Site
from .models import CategoryPage


# Определяем функцию category_page, которая принимает объект запроса в качестве аргумента.
# Эта функция будет использоваться как контекстный процессор.
# Контекстный процессор полезен, когда необходим доступ к какой-то сущности сайта во всех(во многих) шаблонах
# В моем случае во многих шаблонах необходим доступ к CategoryPage для формирования url на страницу категории
def category_page(request):
    # Используем метод find_for_request класса Site для получения объекта сайта,
    # который соответствует текущему запросу. Это позволяет работать с правильным сайтом
    # в случае, если ваш Wagtail-проект поддерживает мульти-сайтовость.
    wagtail_site = Site.find_for_request(request)
    # Создаем словарь контекста, который будет возвращен и добавлен в глобальный контекст шаблонов.
    context = {
        # Используем QuerySet API Wagtail для поиска объектов CategoryPage в пределах найденного сайта.
        # Метод .in_site(wagtail_site) фильтрует страницы, принадлежащие к данному сайту.
        # Метод .live() возвращает только опубликованные страницы.
        # Метод .first() возвращает первый объект из QuerySet, или None, если QuerySet пуст.
        # В результате, 'category_page' будет содержать первую найденную и
        # опубликованную страницу категории для текущего сайта.
        'category_page': CategoryPage.objects.in_site(wagtail_site).live().only('title', 'slug').first()
    }
    return context
